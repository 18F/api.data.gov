name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deploy_env: [production, staging]
        include:
          - deploy_env: production
            web_site_root_secret_name: WEB_SITE_ROOT
          - deploy_env: staging
            web_site_root_secret_name: STAGING_WEB_SITE_ROOT
          - deploy_env: production
            signup_api_key_secret_name: API_KEY
          - deploy_env: staging
            signup_api_key_secret_name: STAGING_API_KEY
          - deploy_env: production
            contact_api_key_secret_name: CONTACT_API_KEY
          - deploy_env: staging
            contact_api_key_secret_name: STAGING_CONTACT_API_KEY
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "0.96.0"
          extended: true

      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: yarn
          cache-dependency-path: "**/yarn.lock"

      # Yarn dependencies
      - name: Yarn Install
        run: yarn install
      # - name: Metrics Yarn Install
      #   working-directory: metrics
      #   run: yarn install

      # Build
      - name: Build
        env:
          WEB_SITE_ROOT: ${{ secrets[matrix.web_site_root_secret_name] }}
          SIGNUP_API_KEY: ${{ secrets[matrix.signup_api_key_secret_name] }}
          CONTACT_API_KEY: ${{ secrets[matrix.contact_api_key_secret_name] }}
        run: |
          HUGO_PARAMS_APIUMBRELLACONTACTAPIKEY="$CONTACT_API_KEY" \
          HUGO_PARAMS_APIUMBRELLASIGNUPAPIKEY="$SIGNUP_API_KEY" \
          hugo \
            --minify \
            --baseURL "$WEB_SITE_ROOT"
      - uses: actions/upload-artifact@v1
        with:
          name: build-${{ matrix.deploy_env }}
          path: ./public

  deploy:
    if: success() && github.repository_owner == '18F' && github.ref == 'refs/heads/signup-form-updates'
    needs: build
    runs-on: ubuntu-latest
    container:
      image: rclone/rclone:1.57.0
    strategy:
      matrix:
        # deploy_env: [production, staging]
        deploy_env: [staging]
        include:
          # - deploy_env: production
          #   bucket_name_secret_name: BUCKET_NAME
          - deploy_env: staging
            bucket_name_secret_name: STAGING_BUCKET_NAME
          # - deploy_env: production
          #   aws_access_key_id_secret_name: AWS_ACCESS_KEY_ID
          - deploy_env: staging
            aws_access_key_id_secret_name: STAGING_AWS_ACCESS_KEY_ID
          # - deploy_env: production
          #   aws_secret_access_key_secret_name: AWS_SECRET_ACCESS_KEY
          - deploy_env: staging
            aws_secret_access_key_secret_name: STAGING_AWS_SECRET_ACCESS_KEY
          # - deploy_env: production
          #   aws_default_region_secret_name: AWS_DEFAULT_REGION
          - deploy_env: staging
            aws_default_region_secret_name: STAGING_AWS_DEFAULT_REGION
    steps:
      # Deploy to S3 bucket.
      - uses: actions/download-artifact@v1
        with:
          name: build-${{ matrix.deploy_env }}
          path: ./public
      - name: Deploy
        env:
          RCLONE_S3_ACCESS_KEY_ID: ${{ secrets[matrix.aws_access_key_id_secret_name] }}
          RCLONE_S3_SECRET_ACCESS_KEY: ${{ secrets[matrix.aws_secret_access_key_secret_name] }}
          RCLONE_S3_REGION: ${{ secrets[matrix.aws_default_region_secret_name] }}
          S3_DEST: ":s3:${{ secrets[matrix.bucket_name_secret_name] }}/"
        run: |
          # Identify cache-busted assets by the fingerprint in the filename.
          cache_busted_assets="/{images,javascripts,stylesheets}/**.{\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w\w}.*"
          # Sync all cache-busted assets with long cache-control expirations.
          rclone \
            copy \
            --verbose \
            --checksum \
            --no-update-modtime \
            --s3-no-check-bucket \
            --s3-no-head \
            --header-upload "Cache-Control: public, max-age=31536000, immutable" \
            --include "$cache_busted_assets" \
            ./public/ \
            "$S3_DEST"
          # Sync the remaining files, disallowing caching on those.
          rclone \
            copy \
            --verbose \
            --checksum \
            --no-update-modtime \
            --s3-no-check-bucket \
            --s3-no-head \
            --header-upload "Cache-Control: no-cache, max-age=0, must-revalidate" \
            ./public/ \
            "$S3_DEST"
          # Run the sync one more time to delete old files. Keep old asset
          # files around, so that if old HTML pages continue to load for a few
          # minutes, they can still load older assets.
          rclone \
            sync \
            --verbose \
            --checksum \
            --no-update-modtime \
            --s3-no-check-bucket \
            --s3-no-head \
            --exclude "$cache_busted_assets" \
            ./public/ \
            "$S3_DEST"
